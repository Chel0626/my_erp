# Generated by Django 5.2.7 on 2025-10-16 00:07

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome completo do cliente",
                        max_length=255,
                        verbose_name="Nome Completo",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        blank=True,
                        help_text="CPF do cliente (opcional)",
                        max_length=14,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CPF deve estar no formato XXX.XXX.XXX-XX ou apenas números",
                                regex="^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$|^\\d{11}$",
                            )
                        ],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="E-mail do cliente",
                        max_length=254,
                        null=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        help_text="Telefone principal (obrigatório)",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Telefone deve conter entre 9 e 15 dígitos",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Telefone Principal",
                    ),
                ),
                (
                    "phone_secondary",
                    models.CharField(
                        blank=True,
                        help_text="Telefone secundário (opcional)",
                        max_length=20,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Telefone deve conter entre 9 e 15 dígitos",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Telefone Secundário",
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True,
                        help_text="Data de nascimento do cliente",
                        null=True,
                        verbose_name="Data de Nascimento",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Masculino"),
                            ("F", "Feminino"),
                            ("O", "Outro"),
                            ("N", "Prefiro não informar"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Gênero",
                    ),
                ),
                (
                    "address_street",
                    models.CharField(
                        blank=True,
                        help_text="Endereço - Rua ou Avenida",
                        max_length=255,
                        null=True,
                        verbose_name="Rua/Avenida",
                    ),
                ),
                (
                    "address_number",
                    models.CharField(
                        blank=True,
                        help_text="Número do endereço",
                        max_length=20,
                        null=True,
                        verbose_name="Número",
                    ),
                ),
                (
                    "address_complement",
                    models.CharField(
                        blank=True,
                        help_text="Complemento (apto, bloco, etc.)",
                        max_length=100,
                        null=True,
                        verbose_name="Complemento",
                    ),
                ),
                (
                    "address_neighborhood",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Bairro"
                    ),
                ),
                (
                    "address_city",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Cidade"
                    ),
                ),
                (
                    "address_state",
                    models.CharField(
                        blank=True,
                        help_text="Sigla do estado (ex: SP, RJ)",
                        max_length=2,
                        null=True,
                        verbose_name="Estado (UF)",
                    ),
                ),
                (
                    "address_zipcode",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CEP deve estar no formato XXXXX-XXX",
                                regex="^\\d{5}-?\\d{3}$",
                            )
                        ],
                        verbose_name="CEP",
                    ),
                ),
                (
                    "preferences",
                    models.TextField(
                        blank=True,
                        help_text="Preferências do cliente (corte favorito, alergias, etc.)",
                        null=True,
                        verbose_name="Preferências",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Observações gerais sobre o cliente",
                        null=True,
                        verbose_name="Observações",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("VIP", "Cliente VIP"),
                            ("REGULAR", "Cliente Regular"),
                            ("NOVO", "Cliente Novo"),
                            ("INATIVO", "Cliente Inativo"),
                        ],
                        default="NOVO",
                        help_text="Categoria do cliente",
                        max_length=20,
                        verbose_name="Tag/Categoria",
                    ),
                ),
                (
                    "avatar_url",
                    models.URLField(
                        blank=True,
                        help_text="URL da foto do cliente",
                        null=True,
                        verbose_name="URL do Avatar",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Cliente ativo no sistema",
                        verbose_name="Ativo",
                    ),
                ),
                (
                    "last_visit",
                    models.DateTimeField(
                        blank=True,
                        help_text="Data e hora da última visita (atualizado automaticamente)",
                        null=True,
                        verbose_name="Última Visita",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.tenant",
                        verbose_name="Empresa",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cliente",
                "verbose_name_plural": "Clientes",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["tenant", "name"], name="customers_c_tenant__5b0286_idx"
                    ),
                    models.Index(
                        fields=["tenant", "phone"],
                        name="customers_c_tenant__6d2a04_idx",
                    ),
                    models.Index(
                        fields=["tenant", "email"],
                        name="customers_c_tenant__0aea56_idx",
                    ),
                    models.Index(
                        fields=["tenant", "tag"], name="customers_c_tenant__c13b9f_idx"
                    ),
                    models.Index(
                        fields=["tenant", "is_active"],
                        name="customers_c_tenant__359dcd_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="customers_c_created_1ed0f4_idx"
                    ),
                ],
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("cpf__isnull", False)),
                        fields=("tenant", "cpf"),
                        name="unique_customer_cpf_per_tenant",
                    )
                ],
            },
        ),
    ]
