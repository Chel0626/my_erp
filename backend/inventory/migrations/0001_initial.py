# Generated by Django 5.2.7 on 2025-10-16 23:21

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0001_initial"),
        ("financial", "0002_transaction_category"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Nome")),
                ("description", models.TextField(blank=True, verbose_name="Descrição")),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("pomada", "Pomada"),
                            ("shampoo", "Shampoo"),
                            ("condicionador", "Condicionador"),
                            ("oleo", "Óleo"),
                            ("cera", "Cera"),
                            ("gel", "Gel"),
                            ("talco", "Talco"),
                            ("navalhete", "Navalhete/Descartável"),
                            ("toalha", "Toalha"),
                            ("outro", "Outro"),
                        ],
                        max_length=50,
                        verbose_name="Categoria",
                    ),
                ),
                (
                    "cost_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Quanto você paga ao fornecedor",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Preço de Custo",
                    ),
                ),
                (
                    "sale_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Quanto você cobra do cliente",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Preço de Venda",
                    ),
                ),
                (
                    "stock_quantity",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Quantidade em Estoque",
                    ),
                ),
                (
                    "min_stock",
                    models.IntegerField(
                        default=5,
                        help_text="Alerta quando estoque ficar abaixo deste valor",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Estoque Mínimo",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Código de Barras"
                    ),
                ),
                (
                    "sku",
                    models.CharField(
                        blank=True,
                        help_text="Stock Keeping Unit",
                        max_length=100,
                        verbose_name="SKU",
                    ),
                ),
                (
                    "image_url",
                    models.URLField(blank=True, verbose_name="URL da Imagem"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.tenant",
                        verbose_name="Empresa",
                    ),
                ),
            ],
            options={
                "verbose_name": "Produto",
                "verbose_name_plural": "Produtos",
                "db_table": "products",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="StockMovement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "movement_type",
                    models.CharField(
                        choices=[("entrada", "Entrada"), ("saida", "Saída")],
                        max_length=20,
                        verbose_name="Tipo de Movimentação",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("compra", "Compra de Fornecedor"),
                            ("venda", "Venda ao Cliente"),
                            ("devolucao", "Devolução"),
                            ("perda", "Perda/Dano"),
                            ("uso_interno", "Uso Interno"),
                            ("ajuste", "Ajuste de Inventário"),
                            ("outro", "Outro"),
                        ],
                        max_length=50,
                        verbose_name="Motivo",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Quantidade",
                    ),
                ),
                ("stock_before", models.IntegerField(verbose_name="Estoque Anterior")),
                ("stock_after", models.IntegerField(verbose_name="Estoque Após")),
                ("notes", models.TextField(blank=True, verbose_name="Observações")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Data da Movimentação"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stock_movements_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Criado por",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stock_movements",
                        to="inventory.product",
                        verbose_name="Produto",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.tenant",
                        verbose_name="Empresa",
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stock_movements",
                        to="financial.transaction",
                        verbose_name="Transação Relacionada",
                    ),
                ),
            ],
            options={
                "verbose_name": "Movimentação de Estoque",
                "verbose_name_plural": "Movimentações de Estoque",
                "db_table": "stock_movements",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "is_active"], name="products_tenant__76cb13_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["tenant", "category"], name="products_tenant__c80e35_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["barcode"], name="products_barcode_d008ac_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["sku"], name="products_sku_fe2039_idx"),
        ),
        migrations.AddConstraint(
            model_name="product",
            constraint=models.UniqueConstraint(
                fields=("tenant", "name"), name="unique_product_name_per_tenant"
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "product", "-created_at"],
                name="stock_movem_tenant__5d6fd9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["tenant", "movement_type", "-created_at"],
                name="stock_movem_tenant__cafcb3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stockmovement",
            index=models.Index(
                fields=["transaction"], name="stock_movem_transac_0ae648_idx"
            ),
        ),
    ]
